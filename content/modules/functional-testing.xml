<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title></title>
  </articleinfo>
<para>
  In this lesson you'll learn how to perform functional tests on your
  Couchbase Mobile application. You'll test the Sync Function to make
  sure it conforms to the business rules of the application.
</para>
<para>
  <block class="ios" />
</para>
<para>
  <a href="https://cl.ly/120p0o0k1O1f/project.zip" class="button" id="project">
  <img src="img/download-xcode.png"> </a>
</para>
<para>
  <block class="all" />
</para>
<sect1 id="introduction">
  <title>Introduction</title>
  <para>
    In this section you will learn how to categorize the different types
    of functional tests. The Sync Function is the application's core
    security component so it's important to test it.
  </para>
  <para>
    When a document is processed in the Sync Function, there are usually
    4 steps to determine if the operation will succeed.
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/image15.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
  <para>
    In the project folder you will find the sync function. The table
    below translates each line from the Sync Function into what it means
    from an access control standpoint.
  </para>
  <sect2 id="try-it-out">
    <title>Try it out</title>
    <orderedlist numeration="arabic">
      <listitem>
        <para>
          Download Sync Gateway
        </para>
      </listitem>
      <listitem>
        <para>
          Start it from the command with the configuration file that was
          provided.
        </para>
        <programlisting language="bash">
~/path/to/sync_gateway sync-gateway-config.json
</programlisting>
        <programlisting>
PS&gt; &amp; 'C:\Program Files (x86)\Couchbase\sync_gateway.exe' sync-gateway-config.json
</programlisting>
      </listitem>
    </orderedlist>
    <blockquote>
      <para>
        <emphasis role="strong">Note:</emphasis> The Sync Gateway
        service might be running on Windows which will prevent this
        command from succeeding with the message 'FATAL: Failed to start
        HTTP server on 127.0.0.1:4985: listen tcp 127.0.0.1:4985: bind:
        Only one usage of each socket address (protocol/network
        address/port) is normally permitted.' To get around this, stop
        the 'Couchbase Sync Gateway' service in 'services.msc'.
      </para>
    </blockquote>
  </sect2>
</sect1>
<sect1 id="testing-validation-rules">
  <title>Testing Validation Rules</title>
  <para>
    The first test you will write is to validate that the document meets
    the schema requirements.
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Scenario
          </entry>
          <entry>
            Document Type
          </entry>
          <entry>
            Type of Test
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            <literal>taskList.id</literal>,
            <literal>taskList.owner</literal> and
            <literal>task</literal> are required
          </entry>
          <entry>
            task
          </entry>
          <entry>
            Validation
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    The section of the Sync Function that implements this rule is the
    following.
  </para>
  <programlisting language="javascript">
...
/* Validate */
if (!oldDoc) {
    // Validate required fields.
    validateNotEmpty(&quot;taskList.id&quot;, doc.taskList.id);
    validateNotEmpty(&quot;taskList.owner&quot;, doc.taskList.owner);
    validateNotEmpty(&quot;task&quot;, doc.task);
}
...
</programlisting>
  <sect2 id="try-it-out-1">
    <title>Try it out</title>
    <orderedlist numeration="arabic">
      <listitem>
        <para>
          Save a new task document with an invalid schema.
        </para>
        <programlisting language="bash">
curl -H 'Content-type: application/json' \
    -X POST 'http://localhost:4985/todo/' \
    -d '{&quot;type&quot;: &quot;task&quot;, &quot;taskList&quot;: {&quot;owner&quot;: &quot;user2&quot;}}'

{&quot;error&quot;:&quot;Forbidden&quot;,&quot;reason&quot;:&quot;taskList.id is not provided.&quot;}

curl -H 'Content-type: application/json' \
    -X POST 'http://localhost:4985/todo/' \
    -d '{&quot;type&quot;: &quot;task&quot;, &quot;taskList&quot;: {&quot;id&quot;: 123}}'

{&quot;error&quot;:&quot;Forbidden&quot;,&quot;reason&quot;:&quot;task.owner is not provided.&quot;}

curl -H 'Content-type: application/json' \
    -X POST 'http://localhost:4985/todo/' \
    -d '{&quot;type&quot;: &quot;task&quot;, &quot;taskList&quot;: {&quot;owner&quot;: &quot;user2&quot;, &quot;id&quot;: 123}}'

{&quot;error&quot;:&quot;Forbidden&quot;,&quot;reason&quot;:&quot;task is not provided.&quot;}
</programlisting>
        <blockquote>
          <para>
            <emphasis role="strong">Note:</emphasis> The curl executable
            for Windows can be found
            <ulink url="https://curl.haxx.se/download.html">on this
            page</ulink>
          </para>
        </blockquote>
        <para>
          The operation is rejected in all 3 requests with a
          <emphasis role="strong">403 Forbidden</emphasis> error because
          the schema is not valid. The test has passed.
        </para>
      </listitem>
    </orderedlist>
  </sect2>
</sect1>
<sect1 id="testing-write-permissions">
  <title>Testing Write Permissions</title>
  <sect2 id="user-write-permissions">
    <title>User write permissions</title>
    <para>
      In this section you will test that normal users can't create a
      list for another user.
    </para>
    <informaltable>
      <tgroup cols="3">
        <colspec align="left" />
        <colspec align="left" />
        <colspec align="left" />
        <thead>
          <row>
            <entry>
              Scenario
            </entry>
            <entry>
              Document Type
            </entry>
            <entry>
              Type of Test
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              Only owner can create lists for themselves
            </entry>
            <entry>
              task-list
            </entry>
            <entry>
              Write
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      The section of the Sync Function that implements this rule is the
      following.
    </para>
    <programlisting language="javascript">
...
/* Control Write Access */
if (!oldDoc) {
    // Users can create/update lists for themselves.
    requireUser(doc.owner);
}
...
</programlisting>
    <sect3 id="try-it-out-2">
      <title>Try it out</title>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Save a new list for another user.
          </para>
          <programlisting language="bash">
curl -H 'Content-Type: application/json' \
    -X POST 'http://user1:pass@localhost:4984/todo/' \
    -d '{&quot;name&quot;: &quot;Groceries&quot;, &quot;type&quot;: &quot;task-list&quot;, &quot;owner&quot;: &quot;user2&quot;}'

{&quot;error&quot;:&quot;Forbidden&quot;,&quot;reason&quot;:&quot;missing role&quot;}
</programlisting>
          <para>
            The operation is rejected with a <emphasis role="strong">403
            Forbidden</emphasis> error because user1 is attempting to
            create a list for user2. The test has passed.
          </para>
        </listitem>
      </orderedlist>
    </sect3>
  </sect2>
  <sect2 id="moderator-write-permissions">
    <title>Moderator write permissions</title>
    <para>
      In this section you will test that moderators have the right to
      create lists for other users.
    </para>
    <informaltable>
      <tgroup cols="3">
        <colspec align="left" />
        <colspec align="left" />
        <colspec align="left" />
        <thead>
          <row>
            <entry>
              Scenario
            </entry>
            <entry>
              Document Type
            </entry>
            <entry>
              Type of Test
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              Moderators can create lists for other users
            </entry>
            <entry>
              task-list
            </entry>
            <entry>
              Write
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      The section of the Sync Function that implements this rule is the
      following.
    </para>
    <programlisting language="javascript">
try {
    // Users can create/update lists for themselves.
    requireUser(doc.owner);
} catch (e) {
    // Moderators can create/update lists for other users.
    requireRole(&quot;moderator&quot;);
}
</programlisting>
    <sect3 id="try-it-out-3">
      <title>Try it out</title>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Grant user1 with the
            <emphasis role="strong">moderator</emphasis> role.
          </para>
          <programlisting language="bash">
curl -H 'Content-Type: application/json' \
    -X PUT 'http://localhost:4985/todo/_user/user1' \
    -d '{&quot;admin_roles&quot;: [&quot;moderator&quot;]}'
</programlisting>
        </listitem>
        <listitem>
          <para>
            Create a new list for user2.
          </para>
          <programlisting language="bash">
curl -H 'Content-Type: application/json' \
    -X POST 'http://user1:pass@localhost:4984/todo/' \
    -d '{&quot;_id&quot;: &quot;user2.123&quot;, &quot;name&quot;: &quot;Groceries&quot;, &quot;type&quot;: &quot;task-list&quot;, &quot;owner&quot;: &quot;user2&quot;}'

200 OK
</programlisting>
          <para>
            The operation is accepted. The test has passed.
          </para>
        </listitem>
      </orderedlist>
    </sect3>
  </sect2>
</sect1>
<sect1 id="testing-update-permissions">
  <title>Testing Update Permissions</title>
  <para>
    In this section you will test that the owner property of a list
    cannot be changed.
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Scenario
          </entry>
          <entry>
            Document Type
          </entry>
          <entry>
            Type of Test
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            Owner field is immutable
          </entry>
          <entry>
            task-list
          </entry>
          <entry>
            Validation
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    The section of the Sync Function that implements this rule is the
    following.
  </para>
  <programlisting language="javascript">
...
/* Validate */
if (!doc._deleted) {
    // Validate required fields.
    validateNotEmpty(&quot;name&quot;, doc.name);
    validateNotEmpty(&quot;owner&quot;, doc.owner);
    // Validate that the _id is prefixed with the owner.
    validatePrefix(&quot;_id&quot;, doc._id, &quot;owner&quot;);
    // Don't allow task-list ownership to be changed.
    validateReadOnly(&quot;owner&quot;, doc, oldDoc);
}
...
</programlisting>
  <sect2 id="try-it-out-4">
    <title>Try it out</title>
    <orderedlist numeration="arabic">
      <listitem>
        <para>
          Create a list for user1.
        </para>
        <programlisting language="bash">
curl -H 'Content-Type: application/json' \
    -X POST 'http://user1:pass@localhost:4984/todo/' \
    -d '{&quot;_id&quot;: &quot;user1.123&quot;, &quot;name&quot;: &quot;Groceries&quot;, &quot;type&quot;: &quot;task-list&quot;, &quot;owner&quot;: &quot;user1&quot;}'

{&quot;id&quot;:&quot;user1.123&quot;,&quot;ok&quot;:true,&quot;rev&quot;:&quot;1-7008921932d980b285d18c173e0dff1f&quot;}
</programlisting>
      </listitem>
      <listitem>
        <para>
          Change the owner property to user2.
        </para>
        <programlisting language="bash">
curl -H 'Content-Type: application/json' \
    -X PUT 'http://user1:pass@localhost:4984/todo/user1.123?rev=1-7008921932d980b285d18c173e0dff1f' \
    -d '{&quot;_id&quot;: &quot;user1.123&quot;, &quot;name&quot;: &quot;Groceries&quot;, &quot;type&quot;: &quot;task-list&quot;, &quot;owner&quot;: &quot;user2&quot;}'

{&quot;error&quot;:&quot;Forbidden&quot;,&quot;reason&quot;:&quot;owner is immutable.&quot;}
</programlisting>
        <para>
          The operation is rejected with a <emphasis role="strong">403
          Forbidden</emphasis> error. The test has passed.
        </para>
      </listitem>
    </orderedlist>
  </sect2>
</sect1>
<sect1 id="testing-routing">
  <title>Testing Routing</title>
  <para>
    In this section you will test the action of sharing a list.
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec colwidth="12*" align="left" />
      <colspec colwidth="19*" align="left" />
      <colspec colwidth="23*" align="left" />
      <thead>
        <row>
          <entry>
            Scenario
          </entry>
          <entry>
            Document Type
          </entry>
          <entry>
            Type of Test
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            The doc.username user is granted read access to the
            &quot;task-list.{doc.taskList.id}&quot; channel
          </entry>
          <entry>
            task-list:user
          </entry>
          <entry>
            Routing
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    When subscribing to the changes feed as a particular user, only the
    documents that the user has access to are returned in the response.
    Thus, you can subscribe to the changes feed to test that the list is
    successfully shared with the user.
  </para>
  <sect2 id="try-it-out-5">
    <title>Try it out</title>
    <orderedlist numeration="arabic">
      <listitem>
        <para>
          Create a new list with 3 tasks.
        </para>
        <programlisting language="bash">
curl -vX POST 'http://user1:pass@localhost:4984/todo/_bulk_docs' \
    -H 'Content-Type: application/json' \
    -d '{&quot;docs&quot;: [{&quot;_id&quot;: &quot;user1.123&quot;, &quot;name&quot;: &quot;Groceries&quot;, &quot;type&quot;: &quot;task-list&quot;, &quot;owner&quot;: &quot;user1&quot;}, {&quot;type&quot;: &quot;task&quot;, &quot;taskList&quot;: {&quot;owner&quot;: &quot;user1&quot;, &quot;id&quot;: &quot;user1.123&quot;}, &quot;task&quot;: &quot;potatoes&quot;}, {&quot;type&quot;: &quot;task&quot;, &quot;taskList&quot;: {&quot;owner&quot;: &quot;user1&quot;, &quot;id&quot;: &quot;user1.123&quot;}, &quot;task&quot;: &quot;tomatoes&quot;}, {&quot;type&quot;: &quot;task&quot;, &quot;taskList&quot;: {&quot;owner&quot;: &quot;user1&quot;, &quot;id&quot;: &quot;user1.123&quot;}, &quot;task&quot;: &quot;apples&quot;}]}'

[{&quot;id&quot;:&quot;user1.123&quot;,&quot;rev&quot;:&quot;1-7008921932d980b285d18c173e0dff1f&quot;},{&quot;id&quot;:&quot;766233c993c6ec0e74d5e2c679d53155&quot;,&quot;rev&quot;:&quot;1-67572fec1d27bd246ce45c691648586d&quot;},{&quot;id&quot;:&quot;061f8c1e7b0d8a02571559ebf062f2ea&quot;,&quot;rev&quot;:&quot;1-389c6e91a20adae28acd1e5f76d732b8&quot;},{&quot;id&quot;:&quot;94305dc7a5ce76a75141c9836d3924a7&quot;,&quot;rev&quot;:&quot;1-f7f5519d3f2c0a5bdf3a122c8bf93042&quot;}]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Query the changes feed as user2.
        </para>
        <programlisting language="bash">
curl -vX GET 'http://user2:pass@localhost:4984/todo/_changes'
</programlisting>
        <para>
          Notice that the response doesn't contain the list that was
          added previously because user2 doesn't have access to this
          list's channel.
        </para>
        <blockquote>
          <para>
            <emphasis role="strong">Tip:</emphasis> Tail the Sync
            Gateway logs.
          </para>
        </blockquote>
      </listitem>
      <listitem>
        <para>
          Create a new list user document to share the list with user2.
        </para>
        <programlisting language="bash">
curl -vX POST 'http://user1:pass@localhost:4984/todo/' \
    -H 'Content-Type: application/json' \
    -d '{&quot;_id&quot;: &quot;user1.123.user2&quot;, &quot;type&quot;: &quot;task-list.user&quot;, &quot;taskList&quot;: {&quot;id&quot;: &quot;user1.123&quot;, &quot;owner&quot;: &quot;user1&quot;}, &quot;username&quot;: &quot;user2&quot;}'
</programlisting>
        <para>
          The sole purpose of this document is to grant user2 access to
          the &quot;task-list.user1.123&quot; channel.
        </para>
      </listitem>
      <listitem>
        <para>
          Query the changes feed as user2 again and notice that now the
          list and task documents are in the response. User2 has now
          access to the shared list. The test has passed.
        </para>
      </listitem>
    </orderedlist>
  </sect2>
</sect1>
<sect1 id="conclusion">
  <title>Conclusion</title>
  <para>
    Well done! You've completed this lesson on functional testing. In
    the next lesson you'll learn how to run performance tests. Feel free
    to share your feedback, findings or ask any questions on the forums.
  </para>
</sect1>
</article>
