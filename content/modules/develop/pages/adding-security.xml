<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Adding Security</title>
  </articleinfo>
<para>
  In this lesson you’ll learn how to add security to your Couchbase
  Mobile application. You’ll implement authentication and define access
  control, data validation, and access grant policies.
</para>
<para>
  <block class="ios" />
</para>
<sect1 id="requirements">
  <title>Requirements</title>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        Xcode 8 (Swift 3)
      </para>
    </listitem>
  </itemizedlist>
</sect1>
<sect1 id="getting-started">
  <title>Getting Started</title>
  <para>
    Download the project below.
  </para>
  <para>
    <a href="{{ site.tutorial_project }}" class="button" id="project">
    <img src="img/download-xcode.png"> </a>
  </para>
  <para>
    Unzip the file and install Couchbase Lite using the install script.
  </para>
  <programlisting language="bash">
$ cd xcode-project
$ ./install.sh
</programlisting>
  <para>
    Open <emphasis role="strong">Todo.xcodeproj</emphasis> in Xcode.
    Then build &amp; run the project.
  </para>
  <para>
    <block class="net" />
  </para>
</sect1>
<sect1 id="requirements-1">
  <title>Requirements</title>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        Visual Studio 2015+ (Windows) or Xamarin Studio 6+ (OS X)
      </para>
    </listitem>
  </itemizedlist>
</sect1>
<sect1 id="getting-started-1">
  <title>Getting Started</title>
  <para>
    Download the project below.
  </para>
  <para>
    <a href="{{ site.tutorial_project }}" class="button" id="project">
    <img src="img/download-vs.png"> </a>
  </para>
  <para>
    <block class="android" />
  </para>
</sect1>
<sect1 id="requirements-2">
  <title>Requirements</title>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        Android Studio 2.2
      </para>
    </listitem>
    <listitem>
      <para>
        Android SDK 24
      </para>
    </listitem>
    <listitem>
      <para>
        Android Build Tools 24.0.3
      </para>
    </listitem>
    <listitem>
      <para>
        JDK 8
      </para>
    </listitem>
    <listitem>
      <para>
        ⚠️ Docker and x86 Android emulators are
        <ulink url="http://stackoverflow.com/questions/37397810/android-studio-unable-to-run-avd">not
        compatible</ulink> (i.e cannot run simultaneously on the same
        machine). Make sure Docker isn't running in the background when
        deploying the application to an x86 Android emulator.
      </para>
    </listitem>
  </itemizedlist>
</sect1>
<sect1 id="getting-started-2">
  <title>Getting Started</title>
  <para>
    Download the project below.
  </para>
  <para>
    <a href="{{ site.tutorial_project }}" class="button" id="project">
    <img src="img/download-android.png"> </a>
  </para>
  <para>
    <block class="all" />
  </para>
</sect1>
<sect1 id="user-authentication">
  <title>User Authentication</title>
  <sect2 id="install-sync-gateway">
    <title>Install Sync Gateway</title>
    <para>
      Users are created with a name/password on Sync Gateway which can
      then be used on the Couchbase Lite replicator to authenticate as a
      given user. You can create users by hardcoding the user's
      name/password in the configuration file. Create a new file called
      <emphasis role="strong">sync-gateway-config.json</emphasis> with
      the following.
    </para>
    <programlisting language="javascript">
{
  &quot;log&quot;: [&quot;HTTP&quot;, &quot;Auth&quot;],
  &quot;databases&quot;: {
    &quot;todo&quot;: {
      &quot;server&quot;: &quot;walrus:&quot;,
      &quot;users&quot;: {
        &quot;user1&quot;: {&quot;password&quot;: &quot;pass&quot;, &quot;admin_channels&quot;: [&quot;user1&quot;]},
        &quot;user2&quot;: {&quot;password&quot;: &quot;pass&quot;, &quot;admin_channels&quot;: [&quot;user2&quot;]},
        &quot;mod&quot;: {&quot;password&quot;: &quot;pass&quot;, &quot;admin_roles&quot;: [&quot;moderator&quot;]},
        &quot;admin&quot;: {&quot;password&quot;: &quot;pass&quot;, &quot;admin_roles&quot;: [&quot;admin&quot;]}
      },
      &quot;roles&quot;: {
        &quot;moderator&quot;: {},
        &quot;admin&quot;: {}
      }
    }
  }
}
</programlisting>
    <sect3 id="try-it-out">
      <title>Try it out</title>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            <ulink url="http://www.couchbase.com/nosql-databases/downloads#couchbase-mobile">Download
            Sync Gateway</ulink>
          </para>
        </listitem>
        <listitem>
          <para>
            Unzip the file and locate the executable at
            <emphasis role="strong">~/Downloads/couchbase-sync-gateway/bin/sync_gateway</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            Start it from the command-line with the config file.
          </para>
          <programlisting language="bash">
$ /path/to/sync_gateway sync-gateway-config.json
</programlisting>
          <programlisting>
PS&gt; &amp; 'C:\Program Files (x86)\Couchbase\sync_gateway.exe' sync-gateway-config.json
</programlisting>
          <blockquote>
            <para>
              <emphasis role="strong">Note:</emphasis> The Sync Gateway
              service might be running on Windows which will prevent
              this command from succeeding with the message 'FATAL:
              Failed to start HTTP server on 127.0.0.1:4985: listen tcp
              127.0.0.1:4985: bind: Only one usage of each socket
              address (protocol/network address/port) is normally
              permitted.' To get around this, stop the 'Couchbase Sync
              Gateway' service in 'services.msc'.
            </para>
          </blockquote>
        </listitem>
        <listitem>
          <para>
            Two users are now visible at
            <ulink url="http://localhost:4985/_admin/db/todo/users">http://localhost:4985/_admin/db/todo/users</ulink>.
          </para>
        </listitem>
      </orderedlist>
    </sect3>
  </sect2>
  <sect2 id="replications-with-authentication">
    <title>Replications with Authentication</title>
    <para>
      With Sync Gateway users defined you can now enable authentication
      on the Couchbase Lite replicator. The code below creates two
      replications with authentication.
    </para>
    <para>
      <block class="ios" />
    </para>
    <programlisting>
// This code can be found in AppDelegate.swift
// in the startReplication(withUsername:andPassword:) method
pusher = database.createPushReplication(kSyncGatewayUrl)
pusher.continuous = true
NotificationCenter.default.addObserver(self, selector: #selector(replicationProgress(notification:)),
    name: NSNotification.Name.cblReplicationChange, object: pusher)

puller = database.createPullReplication(kSyncGatewayUrl)
puller.continuous = true
NotificationCenter.default.addObserver(self, selector: #selector(replicationProgress(notification:)),
                                        name: NSNotification.Name.cblReplicationChange, object: puller)

if kLoginFlowEnabled {
    let authenticator = CBLAuthenticator.basicAuthenticator(withName: username, password: password!)
    pusher.authenticator = authenticator
    puller.authenticator = authenticator
}

pusher.start()
puller.start()
</programlisting>
    <para>
      <block class="net" />
    </para>
    <programlisting language="c#">
// This code can be found in CoreApp.cs
// in the StartReplication(string, string) method
var authenticator = default(IAuthenticator);
if(username != null &amp;&amp; password != null) {
    authenticator = AuthenticatorFactory.CreateBasicAuthenticator(username, password);
}

var db = AppWideManager.GetDatabase(username);
var pusher = db.CreatePushReplication(SyncGatewayUrl);
pusher.Continuous = true;
pusher.Authenticator = authenticator;


var puller = db.CreatePullReplication(SyncGatewayUrl);
puller.Continuous = true;
puller.Authenticator = authenticator;

pusher.Start();
puller.Start();

_pusher = pusher;
_puller = puller;
</programlisting>
    <para>
      <block class="android" />
    </para>
    <programlisting language="java">
URL url = null;
try {
    url = new URL(mSyncGatewayUrl);
} catch (MalformedURLException e) {
    e.printStackTrace();
}

pusher = database.createPushReplication(url);
pusher.setContinuous(true);

puller = database.createPullReplication(url);
puller.setContinuous(true);

if (mLoginFlowEnabled) {
    Authenticator authenticator = AuthenticatorFactory.createBasicAuthenticator(username, password);
    pusher.setAuthenticator(authenticator);
    puller.setAuthenticator(authenticator);
}

pusher.start();
puller.start();
</programlisting>
    <para>
      <block class="all" />
    </para>
    <para>
      The <literal>CBLAuthenticator</literal> class has static methods
      for each authentication method supported by Couchbase Lite. Here,
      you're passing the name/password to the
      <literal>basicAuthenticatorWithName</literal> method. The object
      returned by this method can be set on the replication's
      <literal>authenticator</literal> property.
    </para>
    <sect3 id="try-it-out-1">
      <title>Try it out</title>
      <para>
        <block class="ios" />
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Set <literal>kSyncEnabled</literal> and
            <literal>kLoginFlowEnabled</literal> to
            <literal>true</literal> in
            <emphasis role="strong">AppDelegate.swift</emphasis>.
          </para>
          <programlisting>
let kSyncEnabled = true
let kLoginFlowEnabled = true
</programlisting>
        </listitem>
        <listitem>
          <para>
            Build and run.
          </para>
        </listitem>
        <listitem>
          <para>
            Now login with the credentials saved in the config file
            previously (<emphasis role="strong">user1/pass</emphasis>)
            and create a new list. Open the Sync Gateway Admin UI at
            <ulink url="http://localhost:4985/_admin/db/todo">http://localhost:4985/_admin/db/todo</ulink>,
            the list document is successfully replicated to Sync Gateway
            as an authenticated user.
          </para>
        </listitem>
      </orderedlist>
      <para>
        {% include experimental-label.html %}
      </para>
      <para>
        <img src="img/image35.png" class=center-image />
      </para>
      <para>
        <block class="net" />
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Change <literal>LoginEnabled = false</literal> to
            <literal>LoginEnabled = true</literal> in the
            <literal>CreateHint()</literal> method in
            <emphasis role="strong">CoreApp.cs</emphasis>
          </para>
          <programlisting language="c#">
var retVal = new CoreAppStartHint {
    LoginEnabled = true, // Line to change is here
    EncryptionEnabled = false,
    SyncEnabled = false,
    UsePrebuiltDB = false,
    ConflictResolution = false,
    Username = &quot;todo&quot;
};

return retVal;
</programlisting>
        </listitem>
        <listitem>
          <para>
            Build and run.
          </para>
        </listitem>
        <listitem>
          <para>
            Now login with the credentials saved in the config file
            previously (<emphasis role="strong">user1/pass</emphasis>)
            and create a new list. Open the Sync Gateway Admin UI at
            <ulink url="http://localhost:4985/_admin/db/todo">http://localhost:4985/_admin/db/todo</ulink>,
            the list document is successfully replicated to Sync Gateway
            as an authenticated user.
          </para>
        </listitem>
      </orderedlist>
      <para>
        <block class="wpf" />
      </para>
      <para>
        {% include experimental-label.html %}
      </para>
      <para>
        <img src="img/image35w.png" class=center-image />
      </para>
      <para>
        <block class="android" />
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Set <literal>mSyncEnabled</literal> and
            <literal>mLoginFlowEnabled</literal> to
            <literal>true</literal> in
            <emphasis role="strong">Application.java</emphasis>.
          </para>
          <programlisting language="java">
private Boolean mSyncEnabled = true;
private Boolean mLoginFlowEnabled = true;
</programlisting>
        </listitem>
        <listitem>
          <para>
            Build and run.
          </para>
        </listitem>
        <listitem>
          <para>
            Now login with the credentials saved in the config file
            previously (<emphasis role="strong">user1/pass</emphasis>)
            and create a new list. Open the Sync Gateway Admin UI at
            <ulink url="http://localhost:4985/_admin/db/todo">http://localhost:4985/_admin/db/todo</ulink>,
            the list document is successfully replicated to Sync Gateway
            as an authenticated user.
          </para>
        </listitem>
      </orderedlist>
      <para>
        {% include experimental-label.html %}
      </para>
      <para>
        <img src="img/image35a.png" class=center-image />
      </para>
      <para>
        <block class="wpf" />
      </para>
      <blockquote>
        <para>
          <emphasis role="strong">Note:</emphasis> You can remove the
          local database and check if the pull replication retrieves the
          documents now present on Sync Gateway. Using File Explorer,
          type <literal>%LOCALAPPDATA%</literal> into the location bar
          and press enter, then delete the database
          <emphasis role="strong">user1.cblite2</emphasis>. Then restart
          the app and you'll notice that the &quot;Today&quot; list
          isn't displayed. That is, the list document wasn't replicated
          from Sync Gateway to Couchbase Lite. Indeed, the document is
          not routed to a channel that the user has access to.
          <emphasis role="strong">Channel</emphasis> and
          <emphasis role="strong">access</emphasis> are new terms so
          don't worry, we'll cover what they mean in the next section.
        </para>
      </blockquote>
      <para>
        <block class="xam" />
      </para>
      <blockquote>
        <para>
          <emphasis role="strong">Note:</emphasis> You can remove the
          local database and check if the pull replication retrieves the
          documents now present on Sync Gateway. On macOS, use the
          <ulink url="https://simpholders.com/">SimPholders</ulink>
          utility app to quickly find the data directory of the
          application and delete the database called
          <emphasis role="strong">user1</emphasis> on iOS, or you can
          use the adb shell to navigate to the application's data folder
          and delete it on Android. Then restart the app and you'll
          notice that the &quot;Today&quot; list isn't displayed. That
          is, the list document wasn't replicated from Sync Gateway to
          Couchbase Lite. Indeed, the document is not routed to a
          channel that the user has access to.
          <emphasis role="strong">Channel</emphasis> and
          <emphasis role="strong">access</emphasis> are new terms so
          don't worry, we'll cover what they mean in the next section.
        </para>
      </blockquote>
      <para>
        <block class="all" />
      </para>
    </sect3>
  </sect2>
</sect1>
<sect1 id="access-control">
  <title>Access Control</title>
  <para>
    In order to give different users access to different documents, you
    must write a sync function. The sync function lives in the
    configuration file of Sync Gateway. It’s a JavaScript function and
    every time a new document, revision or deletion is added to a
    database, the sync function is called and given a chance to examine
    the document.
  </para>
  <para>
    You can use different API methods to route documents to channels,
    grant users access to channels and even assign roles to users.
    Access rules generally follow the order shown on the image below:
    write permissions, validation, routing, read permissions.
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/image15.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
  <blockquote>
    <para>
      <emphasis role="strong">Tip:</emphasis> Open the
      <ulink url="/documentation/mobile/current/training/design/security/index.html">Access
      Control</ulink> lesson in a new tab, it will be useful throughout
      this section.
    </para>
  </blockquote>
  <sect2 id="document-types">
    <title>Document Types</title>
    <para>
      The Sync Function takes two arguments:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <emphasis role="strong">doc:</emphasis> The current revision
          being processed.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">oldDoc:</emphasis> The parent
          revisions if it's an update operation and
          <literal>null</literal> if it's a create operation.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Each document type will have different access control rules
      associated with it. So the first operation is to ensure the
      document has a type property. Additionally, once a document is
      created, its type cannot change. The code below implements those 2
      validation rules.
    </para>
    <programlisting language="javascript">
function(doc, oldDoc){
  /* Type validation */
  if (isCreate()) {
    // Don't allow creating a document without a type.
    validateNotEmpty(&quot;type&quot;, doc.type);
  } else if (isUpdate()) {
    // Don't allow changing the type of any document.
    validateReadOnly(&quot;type&quot;, doc.type, oldDoc.type);
  }

  if (getType() == &quot;task-list&quot;) {
    /* Write access */
    /* Validation */
    /* Routing */
    /* Read Access */
  }

  function getType() {
    return (isDelete() ? oldDoc.type : doc.type);
  }

  function isCreate() {
    // Checking false for the Admin UI to work
    return ((oldDoc == false) || (oldDoc == null || oldDoc._deleted) &amp;&amp; !isDelete());
  }

  function isUpdate() {
    return (!isCreate() &amp;&amp; !isDelete());
  }

  function isDelete() {
    return (doc._deleted == true);
  }

  function validateNotEmpty(key, value) {
    if (!value) {
      throw({forbidden: key + &quot; is not provided.&quot;});
    }
  }

  function validateReadOnly(name, value, oldValue) {
    if (value != oldValue) {
      throw({forbidden: name + &quot; is read-only.&quot;});
    }
  }

  // Checks whether the provided value starts with the specified prefix
  function hasPrefix(value, prefix) {
    if (value &amp;&amp; prefix) {
      return value.substring(0, prefix.length) == prefix
    } else {
      return false
    }
  }
}
</programlisting>
    <para>
      As shown above, you can define inner functions to encapsulate
      logic used throughout the sync function. This makes your code more
      readable and follows the DRY principle (Don't Repeat Yourself).
    </para>
    <sect3 id="try-it-out-2">
      <title>Try it out</title>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Open the Sync menu on the Admin UI
            <ulink url="http://localhost:4985/_admin/db/todo/sync">http://localhost:4985/_admin/db/todo/sync</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
            Copy the code snippet above in the Sync Function text area.
          </para>
        </listitem>
        <listitem>
          <para>
            Click the <emphasis role="strong">Deploy To
            Server</emphasis> button. It will update Sync Gateway with
            the new config but it doesn't persist the changes to the
            filesystem.
          </para>
        </listitem>
        <listitem>
          <para>
            Add two documents through the REST API. One with the
            <literal>type</literal> property and the second document
            without it. Notice that the user credentials
            (<emphasis role="strong">user1/pass</emphasis>) are passed
            in the URL.
          </para>
          <programlisting language="bash">
curl -vX POST 'http://user1:pass@localhost:4984/todo/_bulk_docs' \
      -H 'Content-Type: application/json' \
      -d '{&quot;docs&quot;: [{&quot;type&quot;: &quot;task-list&quot;, &quot;name&quot;: &quot;Groceries&quot;}, {&quot;names&quot;: &quot;Today&quot;}]}'
</programlisting>
          <para>
            The output should be the following:
          </para>
          <programlisting language="bash">
[
  {&quot;id&quot;:&quot;e498cad0380e30a86ed5572140c94831&quot;,&quot;rev&quot;:&quot;1-e4ac377fc9bd3345ddf5892b509c4d79&quot;},
  {&quot;error&quot;:&quot;forbidden&quot;,&quot;reason&quot;:&quot;type is not provided.&quot;,&quot;status&quot;:403}
]
</programlisting>
          <blockquote>
            <para>
              <emphasis role="strong">Note:</emphasis> The curl
              executable for Windows can be found
              <ulink url="https://curl.haxx.se/download.html">on this
              page</ulink>
            </para>
          </blockquote>
          <para>
            The document without a type is rejected with an error
            message: &quot;type property missing&quot;.
          </para>
        </listitem>
      </orderedlist>
    </sect3>
  </sect2>
  <sect2 id="write-permissions">
    <title>Write Permissions</title>
    <para>
      Once you know the type of a document, the next step is to check
      the write permissions.
    </para>
    <para>
      The following code ensures the user creating the list document
      matches with the <literal>owner</literal> property or is a
      moderator.
    </para>
    <programlisting language="javascript">
/* Write Access */
var owner = doc._deleted ? oldDoc.owner : doc.owner;
try {
  // Moderators can create/update lists for other users.
  requireRole(&quot;moderator&quot;);
} catch (e) {
  // Users can create/update lists for themselves.
  requireUser(owner);
}
</programlisting>
    <para>
      When a document is deleted the user properties are removed and the
      <literal>_deleted: true</literal> property is added as metadata.
      In this case, the sync function must retrieve the type from
      oldDoc. In the code above, the <literal>getType</literal> inner
      function encapsulates this logic.
    </para>
    <para>
      Similarly, the owner field is taken from oldDoc if doc is a
      deletion revision. The <literal>requireUser</literal> and
      <literal>requireRole</literal> functions are functionalities built
      in Sync Gateway.
    </para>
    <sect3 id="try-it-out-3">
      <title>Try it out</title>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Open the Sync menu on the Admin UI
            <ulink url="http://localhost:4985/_admin/db/todo/sync">http://localhost:4985/_admin/db/todo/sync</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
            Copy the changes above in the Sync Function text area to
            replace the <literal>/* Write access */</literal> block.
          </para>
        </listitem>
        <listitem>
          <para>
            Click the <emphasis role="strong">Deploy To
            Server</emphasis> button. It will update Sync Gateway with
            the new config but it doesn't persist the changes to the
            filesystem.
          </para>
        </listitem>
        <listitem>
          <para>
            Add two documents through the REST API. The request is sent
            as a user (<emphasis role="strong">user1/pass</emphasis>).
            One document is a list for user1 and another is a list for
            user2.
          </para>
          <programlisting language="bash">
curl -vX POST 'http://user1:pass@localhost:4984/todo/_bulk_docs' \
      -H 'Content-Type: application/json' \
      -d '{&quot;docs&quot;: [{&quot;type&quot;: &quot;task-list&quot;, &quot;owner&quot;: &quot;user1&quot;}, {&quot;type&quot;: &quot;task-list&quot;, &quot;owner&quot;: &quot;user2&quot;}]}'
</programlisting>
          <para>
            The response should be the following:
          </para>
          <programlisting language="bash">
[
  {&quot;id&quot;:&quot;8339356c8bb6d8b32477e931ce04c5c9&quot;,&quot;rev&quot;:&quot;1-39539a8ec6ddd252d6aafe1f7e3efd9a&quot;},
  {&quot;error&quot;:&quot;forbidden&quot;,&quot;reason&quot;:&quot;wrong user&quot;,&quot;status&quot;:403}
]
</programlisting>
          <para>
            The list with user2 as the owner is rejected.
          </para>
        </listitem>
      </orderedlist>
    </sect3>
  </sect2>
  <sect2 id="validation">
    <title>Validation</title>
    <para>
      After write permissions, you must ensure the document has the
      expected schema. There are different types of validation such as
      checking for the presence of a field or enforcing read-only
      permission on parts of a document. The code below performs various
      schema validation operations.
    </para>
    <programlisting language="javascript">
/* Validation */
if (!isDelete()) {
  // Validate required fields.
  validateNotEmpty(&quot;name&quot;, doc.name);
  validateNotEmpty(&quot;owner&quot;, doc.owner);

  if (isCreate()) {
    // Validate that the _id is prefixed by owner.
    if (!hasPrefix(doc._id, doc.owner + &quot;.&quot;)) {
        throw({forbidden: &quot;task-list id must be prefixed by list owner&quot;});
    }
  } else {
    // Don’t allow task-list ownership to be changed.
    validateReadOnly(&quot;owner&quot;, doc.owner, oldDoc.owner);
  }
}
</programlisting>
    <para>
      <literal>validateNotEmpty</literal> and
      <literal>validateReadOnly</literal> are inner functions to
      encapsulate common validation operations.
    </para>
    <sect3 id="try-it-out-4">
      <title>Try it out</title>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem>
          <para>
            Open the Sync menu on the Admin UI
            <ulink url="http://localhost:4985/_admin/db/todo/sync">http://localhost:4985/_admin/db/todo/sync</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
            Copy the changes above in the Sync Function text area to
            replace the <literal>/* Validation */</literal> block.
          </para>
        </listitem>
        <listitem>
          <para>
            Click the <emphasis role="strong">Deploy To
            Server</emphasis> button. It will update Sync Gateway with
            the new config but it doesn't persist the changes to the
            filesystem.
          </para>
        </listitem>
      </orderedlist>
      <blockquote>
        <para>
          <emphasis role="strong">Challenge:</emphasis> Persist
          documents using curl until it gets persisted and Sync Gateway
          returns a <emphasis role="strong">201 Created</emphasis>
          status code.
        </para>
      </blockquote>
    </sect3>
  </sect2>
  <sect2 id="routing">
    <title>Routing</title>
    <para>
      Once you have determined that the schema is valid you can route
      the document to channels. A channel is a namespace for documents
      specifically designed for access control. The code below routes
      the document to its own list channel.
    </para>
    <programlisting language="javascript">
/* Routing */
// Add doc to task-list's channel.
channel(&quot;task-list.&quot; + doc._id);
channel(&quot;moderators&quot;);
</programlisting>
    <sect3 id="try-it-out-5">
      <title>Try it out</title>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Open the Sync menu on the Admin UI
            <ulink url="http://localhost:4985/_admin/db/todo/sync">http://localhost:4985/_admin/db/todo/sync</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
            Copy the changes above in the Sync Function text area to
            replace the <literal>/* Routing */</literal> block.
          </para>
        </listitem>
        <listitem>
          <para>
            Click the <emphasis role="strong">Live Preview
            Mode</emphasis> button. This mode doesn't restart Sync
            Gateway but will use the updated Sync Function for testing
            purposes. Click the
            <emphasis role="strong">random</emphasis> button to pick a
            document at random and run it through the sync function
            again. It re-calculates the routing to channels and access
            grants. This time, the owner (user1) has access to its own
            list's channel.
          </para>
        </listitem>
        <listitem>
          <para>
            Both documents are saved and mapped to the corresponding
            channels in the Admin UI.
          </para>
          <figure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/image88.png" />
              </imageobject>
              <textobject><phrase></phrase></textobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>
    </sect3>
  </sect2>
  <sect2 id="read-access">
    <title>Read Access</title>
    <para>
      The last step in writing access control rules for a document type
      is to allow read access to channels. The following code grants the
      owner and users that are moderators access to the list's channel.
    </para>
    <programlisting language="javascript">
/* Read Access */
// Grant task-list owner access to the task-list, its tasks, and its users.
access(owner, &quot;task-list.&quot; + doc._id);
access(owner, &quot;task-list.&quot; + doc._id + &quot;.users&quot;);
access(&quot;role:moderator&quot;, &quot;task-list.&quot; + doc._id);
</programlisting>
    <sect3 id="try-it-out-6">
      <title>Try it out</title>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Open the Sync menu on the Admin UI
            <ulink url="http://localhost:4985/_admin/db/todo/sync">http://localhost:4985/_admin/db/todo/sync</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
            Copy the changes above in the Sync Function text area to
            replace the <literal>/* Read access */</literal> block.
          </para>
        </listitem>
        <listitem>
          <para>
            Click the <emphasis role="strong">Live Preview
            Mode</emphasis> button. This mode doesn't restart Sync
            Gateway but will use the updated Sync Function for testing
            purposes. Click the
            <emphasis role="strong">random</emphasis> button to pick a
            document at random and run it through the sync function
            again. It re-calculates the routing to channels and access
            grants. This time, the owner (user1) has access to its own
            list's channel.
          </para>
          <figure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="img/image38.png" />
              </imageobject>
              <textobject><phrase></phrase></textobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>
    </sect3>
  </sect2>
</sect1>
<sect1 id="conclusion">
  <title>Conclusion</title>
  <para>
    Well done! You've completed this lesson on adding authentication,
    writing a sync function and adding database encryption. Feel free to
    share your feedback, findings or ask any questions on the forums.
  </para>
</sect1>
</article>
