<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title></title>
  </articleinfo>
<sect1 id="introduction">
  <title>Introduction</title>
  <para>
    This guide provides instructions to get started with mobile testkit
    to run Sync Gateway performance tests. The scenarios can run on a
    Vagrant VM or EC2 instances on AWS; this guide covers AWS only.
    Generally speaking there are 4 different steps to running
    performance tests:
  </para>
  <orderedlist numeration="arabic" spacing="compact">
    <listitem>
      <para>
        Provisioning EC2 instances on AWS
      </para>
    </listitem>
    <listitem>
      <para>
        Provisioning the software on separate nodes (sync gateway,
        couchbase server)
      </para>
    </listitem>
    <listitem>
      <para>
        Running the tests
      </para>
    </listitem>
    <listitem>
      <para>
        Writing and running more tests
      </para>
    </listitem>
  </orderedlist>
  <para>
    Mobile-testkit is a set of tools that cover points 2, 3, 4. Before
    you start using mobile-testkit, you must first provision the EC2
    instances.
  </para>
</sect1>
<sect1 id="provisioning-ec2-instances">
  <title>Provisioning EC2 instances</title>
  <sect2 id="aws-security-group">
    <title>AWS Security Group</title>
    <para>
      You will create a security group to open the appropriate ports for
      Sync Gateway and Couchbase Server. In the
      <ulink url="https://console.aws.amazon.com/ec2/v2/home">EC2
      Console</ulink> click <emphasis role="strong">Security
      Groups</emphasis> on the left navigation pane. Create a new
      security group called <emphasis role="strong">couchbase</emphasis>
      with the following Inbound rules:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          TCP ports: 8092, 21100, 11209, 5984, 4985, 4369, 4984, 11210,
          8091, 11211, 9876 with <literal>Anywhere</literal> as the
          source
        </para>
      </listitem>
      <listitem>
        <para>
          SSH ports: 22 with <literal>Anywhere</literal> as the source
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="ec2-instances">
    <title>EC2 Instances</title>
    <para>
      Log in on your AWS account and in the Amazon EC2 menu click the
      <ulink url="https://us-west-2.console.aws.amazon.com/ec2/v2/home?region=us-west-2#LaunchInstanceWizard:">Launch
      Instance</ulink> button. For the AMI, choose the
      <emphasis role="strong">CentOS 7 (x86_64) - with Updates
      HVM</emphasis> from the AWS Marketplace. For the instance type,
      choose <emphasis role="strong">t2.large</emphasis> which is 2 CPUs
      and 8 GB. Choose the security group called
      <emphasis role="strong">couchbase</emphasis> that was created
      above.
    </para>
    <para>
      Make sure you can ssh on those VMs. The user is
      <emphasis role="strong">centos</emphasis>:
    </para>
    <programlisting>
ssh centos@IP-ADDRESS
</programlisting>
  </sect2>
</sect1>
<sect1 id="mobile-testkit">
  <title>mobile-testkit</title>
  <sect2 id="setup">
    <title>Setup</title>
    <para>
      <ulink url="https://cl.ly/0F153d1Y3e1e/mobile-testkit-4de9d2e3e17a18e1995b2a94fc8288c155429333.zip">Download
      mobile-testkit</ulink> and unzip the content.
    </para>
    <para>
      Set the following environment variables:
    </para>
    <programlisting language="bash">
export PATH=~/Downloads/mobile-testkit-4de9d2e3e17a18e1995b2a94fc8288c155429333:$PATH
export PYTHONPATH=~/Downloads/mobile-testkit-4de9d2e3e17a18e1995b2a94fc8288c155429333
export ANSIBLE_CONFIG=~/Downloads/mobile-testkit-4de9d2e3e17a18e1995b2a94fc8288c155429333
</programlisting>
    <para>
      Set virtualenv to install python dependencies:
    </para>
    <programlisting language="bash">
$ [sudo] pip install virtualenv
</programlisting>
    <para>
      Install the dependencies:
    </para>
    <programlisting language="bash">
source setup.sh
</programlisting>
    <para>
      The default user on mobile-testkit is
      <emphasis role="strong">vagrant</emphasis> so you need to change
      it to be <emphasis role="strong">centos</emphasis>:
    </para>
    <programlisting>
cp ansible.cfg.example ansible.cfg
</programlisting>
    <para>
      In ansible.cfg replace the line
      <literal>remote_user = vagrant</literal> with
      <literal>remote_user = centos</literal>.
    </para>
  </sect2>
  <sect2 id="generating-cluster-configs">
    <title>Generating cluster configs</title>
    <para>
      Next, you'll provide the list of EC2 instance IP addresses in a
      file called <emphasis role="strong">pools.json</emphasis>:
    </para>
    <programlisting>
cp resources/pool.json.example resources/pool.json
</programlisting>
    <para>
      Replace the IP addresses.
    </para>
    <programlisting>
{
    &quot;ips&quot;: [
        &quot;52.40.78.128&quot;,
        &quot;52.40.78.128&quot;
    ]
}
</programlisting>
    <para>
      Generate the cluster topologies to run the tests.
    </para>
    <programlisting>
python libraries/utilities/generate_clusters_from_pool.py
</programlisting>
    <para>
      Different cluster topology configs are generated in
      <emphasis role="strong">resources/cluster_configs</emphasis>. Set
      the <literal>CLUSTER_CONFIG</literal> environment variable to the
      desired topology, 1 Sync Gateway and 1 Couchbase Server.
    </para>
    <programlisting>
export CLUSTER_CONFIG=resources/cluster_configs/1sg_1cbs
</programlisting>
    <para>
      Provision Sync Gateway and Couchbase Server (it will use the
      cluster topology set on <literal>CLUSTER_CONFIG</literal>).
    </para>
    <programlisting>
python libraries/provision/provision_cluster.py --server-version=4.1.1 --sync-gateway-version=1.3.0-274
</programlisting>
    <para>
      If the provisioning was successful you will see the following at
      the end of the output:
    </para>
    <programlisting>
PLAY RECAP *********************************************************************

&gt;&gt;&gt; Done provisioning cluster...
</programlisting>
  </sect2>
</sect1>
<sect1 id="running-locust-tests">
  <title>Running Locust tests</title>
  <para>
    Performance tests can be written using
    <ulink url="http://locust.io/">locust.io</ulink>. The write
    throughput scenario
    (<literal>testsuites/syncgateway/performance/locust/runners/WriteThroughputRunner.py</literal>)
    is an example of a test scenario written with locust, the usage of
    locust in mobile-testkit is currently experimental. Refer to this
    example scenario to write your own. To launch the write throughput
    scenario run the following where <literal>IP-ADDRESS</literal> in
    the <literal>--target</literal> flag refers to the IP address of the
    EC2 instance that Sync Gateway is running on. The cluster topology
    file contains this information (e.g
    resources/cluster_configs/1sg_1cbs).
  </para>
  <programlisting>
python testsuites/syncgateway/performance/locust/runners/WriteThroughputRunner.py --target=http://52.88.39.127 --num-writers=10 --num-channels=10 --num-channels-per-doc=2 --total-docs=1000 --doc-size=1024
</programlisting>
  <para>
    Results from the test are available in the output.
  </para>
  <programlisting>
 Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s
--------------------------------------------------------------------------------------------------------------------------------------------
 POST /db/                                                       1000     0(0.00%)     165     154     357  |     160   37.10
 POST /db/_session                                                 10     0(0.00%)     387     340     435  |     380    0.00
 GET /db/_user/user_0                                               1     0(0.00%)     160     160     160  |     160    0.00
 GET /db/_user/user_1                                               1     0(0.00%)     160     160     160  |     160    0.00
 GET /db/_user/user_2                                               1     0(0.00%)     168     168     168  |     170    0.00
 GET /db/_user/user_3                                               1     0(0.00%)     160     160     160  |     160    0.00
 GET /db/_user/user_4                                               1     0(0.00%)     162     162     162  |     160    0.00
 GET /db/_user/user_5                                               1     0(0.00%)     160     160     160  |     160    0.00
 GET /db/_user/user_6                                               1     0(0.00%)     160     160     160  |     160    0.00
 GET /db/_user/user_7                                               1     0(0.00%)     160     160     160  |     160    0.00
 GET /db/_user/user_8                                               1     0(0.00%)     166     166     166  |     170    0.00
 GET /db/_user/user_9                                               1     0(0.00%)     159     159     159  |     160    0.00
--------------------------------------------------------------------------------------------------------------------------------------------
 Total                                                           1020     0(0.00%)                                      37.10

Percentage of the requests completed within given times
 Name                                                           # reqs    50%    66%    75%    80%    90%    95%    98%    99%   100%
--------------------------------------------------------------------------------------------------------------------------------------------
 POST /db/                                                        1000    160    160    160    170    180    180    190    320    357
 POST /db/_session                                                  10    390    410    420    420    440    440    440    440    435
 GET /db/_user/user_0                                                1    160    160    160    160    160    160    160    160    160
 GET /db/_user/user_1                                                1    160    160    160    160    160    160    160    160    160
 GET /db/_user/user_2                                                1    170    170    170    170    170    170    170    170    168
 GET /db/_user/user_3                                                1    160    160    160    160    160    160    160    160    160
 GET /db/_user/user_4                                                1    160    160    160    160    160    160    160    160    162
 GET /db/_user/user_5                                                1    160    160    160    160    160    160    160    160    160
 GET /db/_user/user_6                                                1    160    160    160    160    160    160    160    160    160
 GET /db/_user/user_7                                                1    160    160    160    160    160    160    160    160    160
 GET /db/_user/user_8                                                1    170    170    170    170    170    170    170    170    166
 GET /db/_user/user_9                                                1    160    160    160    160    160    160    160    160    159
--------------------------------------------------------------------------------------------------------------------------------------------
</programlisting>
</sect1>
</article>
