<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Data Modeling</title>
  </articleinfo>
<para>
  In this lesson you will learn how to model the data for an application
  and the relationships between the different models.
</para>
<para>
  Initially, the schema for a todo list application may look like the
  table below.
</para>
<informaltable>
  <tgroup cols="2">
    <colspec align="left" />
    <colspec align="left" />
    <thead>
      <row>
        <entry>
          List
        </entry>
        <entry>
          Task
        </entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          name
        </entry>
        <entry>
          name
        </entry>
      </row>
      <row>
        <entry>
          owner
        </entry>
        <entry>
          complete
        </entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
<para>
  With the following schema relationships:
</para>
<orderedlist numeration="arabic" spacing="compact">
  <listitem>
    <para>
      A task belongs to a list.
    </para>
  </listitem>
  <listitem>
    <para>
      A list belongs to a user.
    </para>
  </listitem>
</orderedlist>
<para>
  Throughout this lesson you will extend this basic data model to meet
  the requirements of the application.
</para>
<sect1 id="from-tables-to-json">
  <title>From Tables to JSON</title>
  <para>
    Couchbase Mobile stores data in documents rather than in table rows.
    A document is a JSON object containing a number of key-value pairs.
    This means that it can take any form as long as it is
    <ulink url="http://www.json.org/">valid JSON</ulink>. The following
    image represents the same schema as the table above but in JSON
    format.
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/03-types.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
  <para>
    We use the <literal>type</literal> property to store the entity type
    on each document.
  </para>
</sect1>
<sect1 id="storing-dates">
  <title>Storing Dates</title>
  <para>
    Another requirement of the application is to sort tasks by the time
    they were created at. JSON itself does not specify how dates should
    be represented. To keep chronological ordering with string dates,
    they should be stored in ISO-8601 format (YYYY-MM-DDThh:mm:ssZ). The
    following diagram adds a <literal>createdAt</literal> field on the
    <emphasis role="strong">task</emphasis> document with the date in
    ISO-8601 format.
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/04-dates.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
</sect1>
<sect1 id="document-ids">
  <title>Document IDs</title>
  <para>
    The document ID is the primary identifier of a document in the
    database. It can be pre-defined by the application or automatically
    generated by the database during a write operation. It is unique in
    the system and does not change throughout the lifecycle of a
    document (CRUD operations). The image below adds unique document IDs
    on the List and Task models..
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/05-ids.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
  <blockquote>
    <para>
      <emphasis role="strong">Note:</emphasis> You may notice that the
      document ID on the List model is prefixed with the owner. This
      design choice will be discussed in detail in the
      <ulink url="/documentation/mobile/1.3/training/design/security/index.html">Access
      Control</ulink> lesson.
    </para>
  </blockquote>
</sect1>
<sect1 id="entity-relationship">
  <title>Entity relationship</title>
  <para>
    There is a one-to-many relationship between the List and Task
    documents. A List can hold several Tasks but a Task can only belong
    to one List. In Couchbase Mobile, relationships between different
    entities (1:1, 1:many and many:many) are implemented by keeping a
    reference from the child to the parent model. The document ID serves
    as the reference (foreign key) since it is unique and doesn't
    change. The image below adds a <literal>list</literal> property on
    the Task model.
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/06-reference.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
</sect1>
<sect1 id="attachments">
  <title>Attachments</title>
  <para>
    Tasks can have an image attached to them. Attachments are also
    persisted to disc and synchronized with the document they belong to.
    The following diagram adds an attachment called
    <literal>photo</literal> of type <literal>image/jpg</literal> to the
    Task model.
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/06-attachment.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
  <blockquote>
    <para>
      <emphasis role="strong">Note:</emphasis> All the fields that start
      with &quot;_&quot; are Couchbase specific (i.e
      <literal>_id</literal>, <literal>_attachments</literal>). For this
      reason, it is not recommended to name your own properties with a
      leading underscore.
    </para>
  </blockquote>
</sect1>
<sect1 id="conclusion">
  <title>Conclusion</title>
  <para>
    Well done! You've completed this lesson on modeling the data in
    different documents and the relationships between them. In the next
    lesson you'll learn how to design the security model for each type
    of document. Feel free to share your feedback, findings or ask any
    questions on the forums.
  </para>
</sect1>
</article>
