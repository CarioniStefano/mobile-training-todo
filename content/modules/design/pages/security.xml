<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Security and Access Control</title>
  </articleinfo>
<para>
  In this lesson you’ll learn how to secure your data model using
  Couchbase Mobile’s built-in security framework.
</para>
<para>
  Security rules are used to determine who has read and write access to
  the database. They live on the server in Sync Gateway and are enforced
  at all times.
</para>
<para>
  The access control requirements for the application are the following.
</para>
<orderedlist numeration="arabic" spacing="compact">
  <listitem>
    <para>
      A user can create a list and tasks.
    </para>
  </listitem>
  <listitem>
    <para>
      The owner of a list can invite other users to access the list.
    </para>
  </listitem>
  <listitem>
    <para>
      Users invited to a list can create tasks.
    </para>
  </listitem>
  <listitem>
    <para>
      A moderator has access to all lists.
    </para>
  </listitem>
  <listitem>
    <para>
      A moderator can create new tasks and invte users.
    </para>
  </listitem>
</orderedlist>
<sect1 id="routing">
  <title>Routing</title>
  <para>
    Sync Gateway provides an ability to assign documents to something we
    call channels. You control assigning documents to channels through
    the Sync Function. The image below specifies that the List and Task
    documents are assigned to the same channel
    (&quot;list.user1.dk39-4kd9-lw9d&quot;).
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/02-list-channel.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
</sect1>
<sect1 id="read-access">
  <title>Read Access</title>
  <sect2 id="single-user">
    <title>Single user</title>
    <para>
      Once the document is mapped to the channel you can give the user
      access to it. In doing so, that user will have read access to all
      the documents in the channel. The following image specifies the
      <literal>access</literal> call to grant read access to the list
      channel.
    </para>
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="img/03-read-access.png" />
        </imageobject>
        <textobject><phrase></phrase></textobject>
      </mediaobject>
    </figure>
    <blockquote>
      <para>
        <emphasis role="strong">Tip:</emphasis> As shown above, you can
        route documents of different types to the same channel. The
        <literal>access</literal> method can then be invoked once since
        the list and its tasks are in the same channel.
      </para>
    </blockquote>
  </sect2>
  <sect2 id="multiple-users">
    <title>Multiple users</title>
    <para>
      Now let's consider the action of sharing a list with another user.
      Currently, List and Task models do not have an option to specify
      other user names.
    </para>
    <para>
      In the application, there is no limit to how many users can access
      a list. There could be thousands! So instead of embedding other
      user's details on the List model we'll introduce a 3rd document
      that joins a list and user. The image below adds the List User
      model. When processing a document of type &quot;list-user&quot;,
      the Sync Function must grant the user
      (<literal>doc.name</literal>) access to the list
      (<literal>doc.list</literal>).
    </para>
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="img/04-multiple-users.png" />
        </imageobject>
        <textobject><phrase></phrase></textobject>
      </mediaobject>
    </figure>
  </sect2>
</sect1>
<sect1 id="write-access">
  <title>Write Access</title>
  <para>
    Write access security rules are necessary to protect the system.
    Generally that means checking that the user is allowed to perform
    the operation before persisting the document to disc.
  </para>
  <sect2 id="by-user">
    <title>By user</title>
    <para>
      The image below adds a rule to ensure that only the List owner can
      persist those documents.
    </para>
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="img/05-write-by-user.png" />
        </imageobject>
        <textobject><phrase></phrase></textobject>
      </mediaobject>
    </figure>
    <para>
      The List model is the straightforward case, it checks that the
      user synchronizing the document is indeed the owner of the list
      (<literal>doc.owner</literal>).
    </para>
    <para>
      For List User and Task documents the same security can be enforced
      because the owner is prefixed on the List document ID
      (&quot;user1.dk39-4kd9-lw9d&quot;).
    </para>
  </sect2>
  <sect2 id="by-access">
    <title>By Access</title>
    <para>
      The image below adds a rule to allow invited users to create
      tasks. If the user sending the task has access to the list channel
      (&quot;user1.dk39-4kd9-lw9d&quot;) then it must have been invited
      and therefore can persist the task.
    </para>
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="img/06-write-by-access.png" />
        </imageobject>
        <textobject><phrase></phrase></textobject>
      </mediaobject>
    </figure>
  </sect2>
</sect1>
<sect1 id="roles">
  <title>Roles</title>
  <para>
    Another design requirement of the application is that certain users
    can be moderators. In that case they can perform more operations
    than other non-moderating users. A user can be elected to be a
    moderator by users with the admin role only.
  </para>
  <para>
    The image below adds a new Moderator model for this purpose.
  </para>
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/07-role.png" />
      </imageobject>
      <textobject><phrase></phrase></textobject>
    </mediaobject>
  </figure>
  <para>
    The following security changes to routing, read and write
    permissions were added.
  </para>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        List, List User and Task documents are routed to the
        &quot;moderators&quot; channel.
      </para>
    </listitem>
    <listitem>
      <para>
        Moderators have access to all the lists and can create new tasks
        or invite users.
      </para>
    </listitem>
  </itemizedlist>
</sect1>
<sect1 id="conclusion">
  <title>Conclusion</title>
  <para>
    Well done! You've completed this lesson on designing the security
    model for each scenario in the application. In the next lesson
    you'll learn how to create an empty database to store documents.
    Feel free to share your feedback, findings or ask any questions on
    the forums.
  </para>
</sect1>
</article>
